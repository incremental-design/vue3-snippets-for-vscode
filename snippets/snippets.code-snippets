{
  "Vue 3 Composition API - Setup Function": {
    "prefix": "<script setup lang=\"ts\">",
    "body": "<template>\n\t<slot name=\"default\">\n</template>\n\n<script setup lang=\"ts\">\n\n\t// see: https://vuejs.org/api/sfc-script-setup.html#script-setup\n\n\timport {Ref, ref} from 'vue'\n\n\t// see: https://vuejs.org/guide/typescript/composition-api.html#typing-component-props\n\tinterface Props {\n\t\t//foo: string\t\t// as of vue 3.3, this can be any imported or conditional type\n\t\t//bar?: number\n\t}\n\n\tconst props = withDefaults(defineProps<Props>(),{\n\t\t// foo: 'abc',\t\t// set prop default values\n\t\t// bar: 42\n\t})\n\n\t// see: https://vuejs.org/guide/typescript/composition-api.html#typing-component-emits\n\tinterface Emits {\n\t//\t fooEvent: [\t\t// where fooEvent is emitted as emit('fooEvent', 42, true, {a: 22, b: false})\n\t//\t\tbar: number,\n\t//\t\tfizz: boolean,\n\t//\t\tqux:{\n\t//\t\t\ta: number,\n\t//\t\t\tb: boolean\n\t//\t\t}\n\t//\t]\n\t}\n\n\tconst emit = defineEmits<Emits>\n\n\t//see: https://vuejs.org/api/sfc-script-setup.html#defineexpose\n\tconst exposed: Ref<boolean> = ref(false)\n\tdefineExpose({exposed})\n\n\t// see: https://vuejs.org/api/sfc-script-setup.html#defineslots\n\tinterface Slots {\n\t\t// default(props: {msg: string}): any // the function name is the name of the slot, and the items in props are the scope exposed to the component that fills the slot: https://vuejs.org/guide/components/slots.html#scoped-slots\n\t}\n\n\tconst slots = defineSlots<Slots>()\n\n</script>"
  },
  "Vue 3 Composition API - Provide Function": {
    "prefix": "provide()",
    "body": "provide(${1:key}, ${2:'someValue'})${3: /* the 'key' argument must be an `InjectionKey`, and the 'someValue' argument must be a value of the `InjectionKey`'s <type>*/}",
    "description": "Stubs out a function that makes a property available to every descendent of your component."
  },
  "Vue 3 Composition API - Inject Function": {
    "prefix": "const inject =",
    "body": "const inject = inject(${1:key})${2: /* the key must be an `InjectionKey`*/}",
    "description": "Stubs out a statement which injects an item that an ancestor provides your component."
  },
  "Vue 3 Composition API - Computed Property Function": {
    "prefix": "computed property",
    "body": "/**\n * ${1:computedPropertyName}${2: - }${3:description of what the property does}\n */\nconst ${1:computedPropertyName}:ComputedRef<${4:any}> = computed(() => {\n\treturn ${5:/* value of computed property */}\n})",
    "description": "Stubs out a function that defines a reactive computed property."
  },
  "Vue 3 Composition API - Computed Property Function with Getter and Setter": {
    "prefix": "computed property with getter and setter",
    "body": "/**\n * ${1:computedPropertyName}${2: - }${3:description of what the property does}\n */\nconst ${1:computedPropertyName}:WritableComputedRef<${4:any}> = computed({${5:/* // If you use this function outside of a `reactive()`, make sure you use `.value` to unwrap reactive references. */}${6:\n\t/* see: https://v3.vuejs.org/api/computed-watch-api.html#computed /*}\n\tget: ():${4: any} => {\n\t\t${7:// function that returns the value of the computed property}\n\t\\},\n\tset: (value:${4: any}) => {\n\t\t${9:// function that returns nothing}\n\t\\}\n})",
    "description": "Stubs out a function that defines a reactive computed property with a getter and a setter."
  },
  "Vue 3 Composition API -  Method": {
    "prefix": "method()",
    "body": "/**\n * ${1:method name} ${2:description of method}\n *\n * @param ${3:parameter name} ${4:description of parameter}\n *\n * @return ${5:description of what the method returns}\n *${6:\n * @event list of events this method `\\$emit`s}${7:\n * @remarks\n * Any explanation of implementation details or reasons you made this method\n *}${8:\n * @public}\n */\nconst ${1:method name} = (${9:arg}):${10:returnType} => {${11:/* remember to add this method to the setup function's return object, so that you can access it from your component's template */}\n\t${12:// method body}\n};",
    "description": "Stubs out a single method."
  },
  "Vue 3 Composition API - WatchEffect Function": {
    "prefix": "watchEffect()",
    "body": "${1:const }${2:stopWatchEffect}${3: /* this is a callback that dismantles the watchEffect function. See https://v3.vuejs.org/guide/reactivity-computed-watchers.html#stopping-the-watcher */\n}${4:= }watchEffect(() => {${5:/* make sure you unwrap reactive references with `.value`. See https://v3.vuejs.org/guide/reactivity-fundamentals.html#ref-unwrapping *}\n\t${6:// function you want to run immediately, and every time any reactive reference within it changes}\n\\})",
    "description": "Stubs out a function that defines a callback that runs when a property changes."
  },
  "Vue 3 Composition API - Watch Function": {
    "prefix": "watch()",
    "body": "${1:const }${2:stopWatch}${3: /* this is a callback that dismantles the watch function. see: https://v3.vuejs.org/guide/reactivity-computed-watchers.html#shared-behavior-with-watcheffect */\n}${4:= }watch(\n\t[${5:/* reactive(s) */}],${6: /* you can watch an entire array of reactive values */}\n\t(current, previous) => {${7: /* see: https://v3.vuejs.org/guide/reactivity-computed-watchers.html#watch */\n\t/* if you use a watcher to trigger an async function, make sure you invalidate side effects! See: https://v3.vuejs.org/guide/reactivity-computed-watchers.html#side-effect-invalidation */}\n\t\t${8:// code you want to run when reactives change}\n\t\\},\n\t{\n\t\tdeep: ${9:true},${10: /* see https://v3.vuejs.org/guide/reactivity-computed-watchers.html#watching-reactive-objects*/}\n\t\timmediate: ${11:false}${12: /*see: https://v3.vuejs.org/api/instance-methods.html#watch*/}\n\t}\n)",
    "description": "Stubs out a function that defines a callback that runs when a property changes. Unlike `watchEffect()`, watch receives both the previous and current value of a property, so that you can conditionally run code based on the difference."
  },
  "Vue 3 Composition API - onBeforeMount Function": {
    "prefix": "onBeforeMount()",
    "body": "onBeforeMount(() => {\n\t${1:/* do something before Vue calls this component's render function */}\n})",
    "description": "Stubs out a function that runs code before your component is mounted."
  },
  "Vue 3 Composition API - onMounted Function": {
    "prefix": "onMounted()",
    "body": "onMounted(() => {\n\t${1:/* do something right after Vue calls this component's render function */\n\t}${2:// nextTick(function(){\n\t//\t /* do something right after Vue renders this component's children */\n\t// \\})}\n})",
    "description": "Stubs out a function that runs code as soon as your component is mounted."
  },
  "Vue 3 Composition API - onBeforeUpdate Function": {
    "prefix": "onBeforeUpdate()",
    "body": "onBeforeUpdate(() => {\n\t${1:/* do something before Vue re-renders this component*/}\n})",
    "description": "Stubs out a function that runs code before your component is patched with changes to the DOM."
  },
  "Vue 3 Composition API - onUpdated Function": {
    "prefix": "onUpdated()",
    "body": "onUpdated(() => {\n\t${1:/* do something right after Vue re-renders this component*/}\n})",
    "description": "Stubs out a function that runs code as soon as your component is patched with changes to the DOM."
  },
  "Vue 3 Composition API - onActivated Function": {
    "prefix": "onActivated()",
    "body": "onActivated(() => {\n\t${1:/* do something when this component has been kept alive and is activated (see: https://v3.vuejs.org/api/options-lifecycle-hooks.html#activated ) */}\n})",
    "description": "Stubs out a function that runs code when your kept-alive component is activated."
  },
  "Vue 3 Composition API - onDeactivated Function": {
    "prefix": "onDeactivated()",
    "body": "onDeactivated(() => {\n\t${1:/* do something when this component has been ketp alive and is deactivated */}\n})",
    "description": "Stubs out a function that runs code before your kept-alive component is deactivated."
  },
  "Vue 3 Composition API - onBeforeUnmount Function": {
    "prefix": "onBeforeUnmount()",
    "body": "onBeforeUnmount(() => {\n\t${1:/* do something before Vue destroys this component's DOM elements */}\n})",
    "description": "Stubs out a function that runs code before your component is unmounted."
  },
  "Vue 3 Composition API - onUnmounted Function": {
    "prefix": "onUnmounted()",
    "body": "onUnmounted(() => {\n\t${1:/* do something after Vue destroys this component's DOM elements*/}\n})",
    "description": "Stubs out a function that runs code as soon as your component is unmounted."
  },
  "Vue 3 Composition API - onErrorCaptured Function": {
    "prefix": "onErrorCaptured()",
    "body": "onErrorCaptured(() => {\n\t${1:/* do something when this component errors. Optionally return 'true' or 'false'. (see: https://v3.vuejs.org/api/options-lifecycle-hooks.html#errorcaptured ) */}\n})",
    "description": "Stubs out a function that runs code whenever an error occurs in your component."
  },
  "Vue 3 Composition API - onRenderTracked Function": {
    "prefix": "onRenderTracked()",
    "body": "onRenderTracked(() => {\n\t${1:/* do something when this component's re-render is observed by something else. (see: https://v3.vuejs.org/api/options-lifecycle-hooks.html#rendertracked ) */}\n})",
    "description": "Stubs out a function that runs code as soon as your component is rendered."
  },
  "Vue 3 Composition API - onRenderTriggered Function": {
    "prefix": "onRenderTriggered()",
    "body": "onRenderTriggered(() => {\n\t${1:/* do something when an event triggers this component to re-render. (see: https://v3.vuejs.org/api/options-lifecycle-hooks.html#rendertriggered ) */}\n})",
    "description": "Stubs out a function that runs code as soon as a change elsewhere in the Virtual DOM triggers a re-render of your component."
  },
  "Vue 3 Docgen - Component Section": {
    "prefix": "/component",
    "body": "/**\n * ${1:What is the component's single responsibility?}\n *${2:\n * @remarks\n * When should you use the component? What performance benefits or other magical powers does it confer upon you?\n * * When shouldn't you use the component?\n * * What states does this component furnish?\n * * What behaviors does this component furnish?\n * * Can you inject dependencies into this component, with props, slots or the inject option?\n * * Are there any situations where it makes sense to extend thsi component, rather than inject dependencies into it?\n * * How does the code in this component work?\n *}${3:\n * @example\n * ```vue\n * // example of how to use this component\n * ```}\n */",
    "description": "Describes the purpose and behavior of the component. Place it directly above a component's `export default` statement."
  },
  "Vue 3 Docgen - Values Tag": {
    "prefix": "@values",
    "body": "\n* @values ${1: a list of values that a prop accepts}\n*",
    "description": "Lists the values a prop can take."
  },
  "Vue 3 Docgen - Event Section": {
    "prefix": "/event",
    "body": "/**\n * Description of custom event${1:\n *\n * @param }${2:payload}${3: - Description of the values payload takes, and what it affects}\n */",
    "description": "Lists the event(s) that the are `$emit(...)`ed by the method or watcher it documents."
  },
  "Vue 3 Docgen - Example Tag": {
    "prefix": "@example",
    "body": "\n* @example\n* ```vue\n*\n* // example of how to use this component\n*\n* ```\n*",
    "description": "Shows an example of how to use the code it documents."
  },
  "Vue 3 Docgen - Deprecated Tag": {
    "prefix": "@deprecated",
    "body": "\n* @deprecated Use @link ${1:API item} instead.\n*",
    "description": "Deprecates the code it documents, and links to the replacement code."
  },
  "Vue 3 Docgen - See Tag": {
    "prefix": "@see",
    "body": "\n* @see @link ${1:URL or API item}\n*",
    "description": "Links to another section of the documentation, or to a website."
  },
  "Vue 3 Docgen - Link Tag": {
    "prefix": "@link",
    "body": "@link ${1:URL or API item}",
    "description": "Links to another section of the documentation, or to a website."
  },
  "Vue 3 Docgen - Author Tag": {
    "prefix": "@author",
    "body": "\n* @author ${1:Your Name} ${2:<your email>}\n*",
    "description": "List the name and author of the person who wrote the code."
  },
  "Vue 3 Docgen - Since Tag": {
    "prefix": "@since",
    "body": "\n* @since ${1:version number}\n*",
    "description": "Lists the version that the code it documents first appeared in the codebase."
  },
  "Vue 3 Docgen - Version Tag": {
    "prefix": "@version",
    "body": "\n* @version ${1:version number}\n*",
    "description": "Lists the version that the code it documents first appeared in the codebase."
  },
  "Vue 3 Docgen - Ignore Tag": {
    "prefix": "@ignore",
    "body": "\n* @ignore${1: don't document this prop component}\n*",
    "description": "Excludes the documentation from autogenerated documentation sites."
  },
  "Vue 3 Docgen - Param Tag": {
    "prefix": "@param",
    "body": "\n* @param ${1:name}${2: - Description of values argument takes and what it affects}\n*",
    "description": "Describes the values that the method it documents accepts for an argument."
  }
}
